"""
GitHub service for automatic repository operations.
Handles automatic commit and push of generated values files.
"""

import subprocess
from datetime import datetime
from pathlib import Path
from typing import List


class GitHubService:
    """Service for automatic GitHub operations."""

    def __init__(self, repo_path: str = "/home/sirwan/apps-repo"):
        self.repo_path = Path(repo_path)

    def git_command(self, cmd: List[str]) -> tuple[bool, str]:
        """Execute git command and return success status and output."""
        try:
            result = subprocess.run(
                ["git"] + cmd,
                cwd=self.repo_path,
                capture_output=True,
                text=True,
                check=True,
            )
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, f"Git command failed: {e.stderr}"
        except Exception as e:
            return False, f"Unexpected error: {str(e)}"

    def check_git_status(self) -> tuple[bool, List[str]]:
        """Check if there are any uncommitted changes."""
        success, output = self.git_command(["status", "--porcelain"])
        if not success:
            return False, []

        # Parse git status output to get list of changed files
        changed_files = []
        for line in output.strip().split("\n"):
            if line.strip():
                # Format: "XY filename" where X and Y are status codes
                changed_files.append(line[3:].strip())

        return True, changed_files

    def add_values_files(self) -> tuple[bool, str]:
        """Add all values files in the website-template directory."""
        values_pattern = "idp/backend/website-template/values/*.yaml"
        success, output = self.git_command(["add", values_pattern])
        return success, output

    def commit_values(
        self, website_id: str, action: str = "created"
    ) -> tuple[bool, str]:
        """Commit values files with descriptive message."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        commit_message = (
            f"feat: {action} WordPress values for {website_id}\n\n"
            f"Auto-generated Bitnami WordPress Helm values\n"
            f"Website ID: {website_id}\n"
            f"Timestamp: {timestamp}\n"
            f"Generated by: Website IDP Backend"
        )

        success, output = self.git_command(["commit", "-m", commit_message])
        return success, output

    def push_to_remote(self, branch: str = "developer") -> tuple[bool, str]:
        """Push commits to remote repository."""
        success, output = self.git_command(["push", "origin", branch])
        return success, output

    def auto_push_values(self, website_id: str, action: str = "created") -> dict:
        """
        Automatically commit and push new values files.
        Returns status information about the operation.
        """
        result = {
            "success": False,
            "website_id": website_id,
            "action": action,
            "steps": {},
            "message": "",
        }

        # Step 1: Check git status
        status_success, changed_files = self.check_git_status()
        result["steps"]["check_status"] = {
            "success": status_success,
            "changed_files": changed_files,
        }

        if not status_success:
            result["message"] = "Failed to check git status"
            return result

        # Step 2: Add values files
        add_success, add_output = self.add_values_files()
        result["steps"]["add_files"] = {
            "success": add_success,
            "output": add_output,
        }

        if not add_success:
            result["message"] = f"Failed to add values files: {add_output}"
            return result

        # Step 3: Commit changes
        commit_success, commit_output = self.commit_values(website_id, action)
        result["steps"]["commit"] = {
            "success": commit_success,
            "output": commit_output,
        }

        if not commit_success:
            result["message"] = f"Failed to commit changes: {commit_output}"
            return result

        # Step 4: Push to remote
        push_success, push_output = self.push_to_remote()
        result["steps"]["push"] = {
            "success": push_success,
            "output": push_output,
        }

        if not push_success:
            result["message"] = f"Failed to push to remote: {push_output}"
            return result

        # Success!
        result["success"] = True
        result["message"] = (
            f"Successfully pushed {action} values for {website_id} to GitHub"
        )

        return result

    def setup_git_config(self) -> tuple[bool, str]:
        """Setup basic git configuration if not already set."""
        commands = [
            ["config", "user.name", "Website IDP Backend"],
            ["config", "user.email", "idp@naserraoofi.com"],
            ["config", "core.autocrlf", "false"],
        ]

        for cmd in commands:
            success, output = self.git_command(cmd)
            if not success:
                return False, f"Failed to set git config: {output}"

        return True, "Git configuration completed successfully"


# Create singleton instance
github_service = GitHubService()
